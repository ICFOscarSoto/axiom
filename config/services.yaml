# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
framework:
    session:
        # ...
        enabled: true
        handler_id: session.storage.custom


parameters:
    locale: 'en'
    app.activity_listener.class: App\Modules\Globale\Services\ActivityListener
    pdo.db_options:
        db_table:    globale_user_sessions
        db_id_col:   sessionid
        db_data_col: data
        db_time_col: time
        db_ipaddress_col: ipaddress
        db_start_col: start
        db_lastactivity_col: lastactivity
        db_lifetime_col: lifetime
        db_user_id_col: user_id
        db_username: %env(string:DATABASE_USER)%
        db_password: %env(string:DATABASE_PASS)%
        db_host: %env(string:DATABASE_HOST)%
        db_base: %env(string:DATABASE_BASE)%
    #Configuracion de los PATH globales
    config.paths:
      signedDeliveryNotes_temp: %env(string:SIGNEDDELIVERYNOTES_TEMP_PATH)%
      signedDeliveryNotes: %env(string:SIGNEDDELIVERYNOTES_PATH)%
      signedDeliveryNotes_fail: %env(string:SIGNEDDELIVERYNOTES_FAIL_PATH)%
      signedDeliveryNotes_preOCR: %env(string:SIGNEDDELIVERYNOTES_PREOCR_PATH)%
      payroll_preOCR: %env(string:payroll_preOCR)%
      payroll_temp: %env(string:payroll_temp)%
      callrecords: %env(string:CALLRECORDS_PATH)%

services:
    # default configuration for services in *this* file
    _defaults:
      autowire: true      # Automatically injects dependencies in your services.
      autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
      public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'



    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    #App\Controller\:
    #    resource: '../src/Controller'
    #    tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    app.activity_listener.class:
            class: %app.activity_listener.class%
            arguments: ['@security.token_storage','@doctrine.orm.entity_manager']
            tags:
                - { name: kernel.event_listener, event: kernel.controller, method: onCoreController }


    session.storage.custom:
            class: App\Modules\Globale\Services\SessionHandler
            arguments: ["%pdo.db_options%", '@security.token_storage', '@doctrine.orm.entity_manager']

    App\Modules\Globale\Command\ProccessSignedDeliveryNote:
            arguments: ["%config.paths%"]

    App\Modules\Globale\Command\OcrSignedDeliveryNote:
            arguments: ["%config.paths%"]

    App\Modules\HR\Command\PayrollProccess:
            arguments: ["%config.paths%"]
