{% if include_pre_templates is defined %}
	{% for template in include_pre_templates %}
		{{ include(template) }}
	{% endfor %}
{% endif %}
<input type="hidden" id="search_param"/>
<script>
			$(document).ready(function() {
				var ${{ listConstructor.id }}_var = jQuery("#{{ listConstructor.id }}");
				var {{ listConstructor.id }} = ${{ listConstructor.id }}_var.DataTable( {
					"aLengthMenu": [[10, 20, 50, 250], [10, 20, 50, 250]],
					"pageLength": 20,
					//"processing": true,
					"serverSide": true,
					{% if listConstructor.routeParams is defined %}
					"ajax": "{{ url( listConstructor.route, listConstructor.routeParams) }}",
					{% else %}
					"ajax": "{{ url( listConstructor.route ) }}",
					{% endif %}
					"language": {
						//"processing": '<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i><span class="sr-only">Cargando...</span> ',
						"lengthMenu": "Mostrar _MENU_ registros por página",
						"zeroRecords": "No se encontraron registros",
						"info": "Mostrando página _PAGE_ de _PAGES_",
						"infoEmpty": "No se encontraron registros",
						"infoFiltered": "(filtrados de _MAX_ registros totales)",
						"search":         "Buscar",
						"paginate": {
							"first":      "Primero",
							"previous":   "Anterior",
							"next":       "Siguiente",
							"last":       "Último"
						},

					},

					"order": [[ {{  listConstructor.orderColumn }}, "{{  listConstructor.orderDirection }}" ]],
					"columns": [
                        { "name": "checkboxes" ,"data": null, defaultContent: '' },
						{% for field in  listConstructor.fields %}
							{ "name": "{{ field.name }}" ,"data": "{{ field.name }}" },
						{% endfor %}
                        { "data": null, defaultContent: '' }
					],
					"drawCallback": function( settings ) {

							replaceCheckboxes();
					},

					{# Sumamos columnas con sum=true#}
					"footerCallback": function(row, data, start, end, display) {
						var api = this.api();

						api.columns('.sum', {
							page: 'current'
						}).every(function() {
							var data = this
								.data()
								.reduce(function(a, b) {
									var x = parseFloat(a) || 0;
									var y = parseFloat(b) || 0;
									return x + y;
								}, 0);
							 this.columns('.time', {page: 'current'}).every(function() {
								 //if has format we format it
	 	 							if(data!=null){
	 								var duration = moment.duration(data, 'seconds');
	 								var formatted = duration.format("hh:mm:ss");
	 								if(formatted.length==2) formatted="00:00:"+formatted;
	 								if(formatted.length==5) formatted="00:"+formatted;
	 							}else formatted = '00:00:00';
								data=formatted;
							 },0);
							 $("#{{ listConstructor.id }}-footer").show();
							$(this.footer()).html(data);
						});
					},
					"columnDefs": [
						{
							"targets": 0,
							"orderable": false,
							"className": "text-center",
							"render": function(data, type, row, meta){

									return '<div class="checkbox checkbox-replace">'+
											  '<input type="checkbox" item-id="'+row['id']+'" class="{{ listConstructor.id }}-chk-list" id="'+row['id']+'-{{ listConstructor.id }}-chk-list">'+
											  '</div>';
								}
						},

						{% set counter = 1 %}
						{% for field in listConstructor.fields %}
								{
									"targets": {{ counter }},
									{# only show order field in data type fields#}
									{% if field.type is not defined or field.type == "data" %}
									"orderable": true,
									{% else %}
									"orderable": false,
									{% endif %}



									{% if field.class is defined %} "className": "{{ field.class }}", {% endif %}
									{% if field.width is defined %} "width": "{{ field.width }}", {% endif %}

									{% if field.format is defined %}
										{% if field.format == "time" %}
											"render": function(data, type, row, meta){
													//var date = new Date(data*1000);
													//return ("0" + date.getHours()).slice(-2)+':'+("0" + date.getMinutes()).slice(-2)+':'+("0" + date.getSeconds()).slice(-2);;
													if(data!=null){
														var duration = moment.duration(data, 'seconds');
														var formatted = duration.format("hh:mm:ss");
														if(formatted.length==2) formatted="00:00:"+formatted;
														if(formatted.length==5) formatted="00:"+formatted;
														return formatted;
													}else return '00:00:00';
											}
										{% endif %}
									{% else %}
										"render": function(data, type, row, meta){

											var text='';
												if(Array.isArray(data))
													text=data[1];
													else text=data;
												if({{counter}}=={{listConstructor.tagColumn}}){
													text+="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
													row['_tags'].forEach(function(valor, indice, array) {
															text+='<div class="label label-'+valor.type+'">'+valor.name+'</div>';
													});
												}
												return text;
										},
										{% endif %}
								},
						{% set counter = counter +1 %}
						{% endfor %}
						{% set counter = 1 %}
						{% for field in listConstructor.fieldButtons %}
						{
							"targets": {{ listConstructor.fields|length+counter }},
							"orderable": false,
							"width": "0.5%",
							"className": "text-right",
							"render": function(data, type, row, meta){
									var buttons='';
									{% if field.type is defined and field.type=="option" %}
										{% for fieldOption in field.options %}
											if(Array.isArray(row["{{ fieldOption.condition }}"]))
											buttons+='<div class="btn-group {% if fieldOption.condition is defined %}'+((row["{{ fieldOption.condition }}"][0]*1 != "{{ fieldOption.conditionValue }}"*1) ? 'hide' : '')+'{% endif %}">	<button attr-id="'+row['id']+'" id="{{ listConstructor.id }}-field-button-{{ fieldOption.id }}-'+row['id']+'" type="button" class="btn btn-{{ fieldOption.type }} tooltip-primary"';
											else
											buttons+='<div class="btn-group {% if fieldOption.condition is defined %}'+((row["{{ fieldOption.condition }}"]*1 != "{{ fieldOption.conditionValue }}"*1) ? 'hide' : '')+'{% endif %}">	<button attr-id="'+row['id']+'" id="{{ listConstructor.id }}-field-button-{{ fieldOption.id }}-'+row['id']+'" type="button" class="btn btn-{{ fieldOption.type }} tooltip-primary"';
											buttons+='{% if fieldOption.tooltip is defined %} data-toggle="tooltip" data-placement="bottom" title="" data-original-title=" {{ fieldOption.tooltip }} {% endif %}"';
											buttons+='{% if fieldOption.confirm is defined %}{% if fieldOption.confirm == true %}  onclick="jQuery(\'#{{ listConstructor.id }}-modal-confirm\').modal(\'show\', {backdrop: \'static\'});" {% endif %}{% endif %}>';
											buttons+='<i class="{{ fieldOption.icon }}"></i></button></div>	';
									{% endfor %}
									{% else %}
									buttons+='<div class="btn-group {% if field.condition is defined %}'+((row["{{ field.condition }}"]*1 != "{{ field.conditionValue }}"*1) ? 'hide' : '')+'{% endif %}">	<button attr-id="'+row['id']+'" id="{{ listConstructor.id }}-field-button-{{ field.id }}-'+row['id']+'" type="button" class="btn btn-{{ field.type }} tooltip-primary"';
									buttons+='{% if field.tooltip is defined %} data-toggle="tooltip" data-placement="bottom" title="" data-original-title=" {{ field.tooltip }} {% endif %}"';
									buttons+='{% if field.confirm is defined %}{% if field.confirm == true %}  onclick="jQuery(\'#{{ listConstructor.id }}-modal-confirm\').modal(\'show\', {backdrop: \'static\'});" {% endif %}{% endif %}>';
									buttons+='<i class="{{ field.icon }}"></i></button></div>	';
									{% endif %}
  							 return buttons;
								}
						},
						{% set counter = counter +1 %}
						{% endfor %}


						{ "visible": false, "targets": 1 }
					]
				}).on( 'processing.dt', function ( e, settings, processing ) {
					if(processing){
						if((++load_wait)==1) $("#load-spinner").fadeIn();
					 }else{
						if((load_wait)>0){ load_wait--; if(load_wait==0) $("#load-spinner").fadeOut();}
					}
    		}).on('preDraw', function () {
        	if((load_wait)==0){ $("#load-spinner").fadeIn(); load_wait++;}
		    })
		    .on( 'draw.dt', function () {
		      if((load_wait)>0){ load_wait--; if(load_wait==0) $("#load-spinner").fadeOut();}
		    });



				//Double click row action if is not defined in listConstructor use edit by default
				$('#{{ listConstructor.id }} tbody').on('dblclick', 'tr', function () {
					var data = {{ listConstructor.id }}.row( this ).data();
					$('#{{ listConstructor.id }}-field-button-{% if listConstructor.rowAction is defined %}{{ listConstructor.rowAction }}{% else %}edit{% endif %}-'+data.id).trigger('click');
				});

				// Initalize Select Dropdown after DataTables is created
				${{ listConstructor.id }}_var.closest( '.dataTables_wrapper' ).find( 'select' ).select2( {
					minimumResultsForSearch: -1
				});

				// Highlighted rows
				$('body').on('click', '.{{ listConstructor.id }}-chk-list', function() {
					$p =  $(this).closest('tr');
					var is_checked = $(this).is(':checked');
					$p[is_checked ? 'addClass' : 'removeClass']( 'highlight' );
				});

				{% for field in listConstructor.fields %}
					$('body').on('keyup', '#s_{{ field.name }}', function() {
						{{ listConstructor.id }}.columns('{{ field.name }}:name').search( this.value ).draw();
						arrayParams={{ listConstructor.id }}.ajax.params();
						$("#search_param").val(jQuery.param(arrayParams));
					});



				{% endfor %}

				// Button select all checkboxes
				$("#{{ listConstructor.id }}-chkall").click(function(){
					var is_checked = $(this).is(':checked');
					$p =  $("[id^='{{ listConstructor.id }}-chk-list']").closest('tr');
					if(is_checked){
						$("[id*='{{ listConstructor.id }}-chk-list']").iCheck('check');
						$("[id*='{{ listConstructor.id }}-chk-list']").attr('checked', true);
						$("[id*='{{ listConstructor.id }}-chk-list']").parent().parent().addClass('checked');
						$p.addClass( 'highlight' );
					}else{
						$("[id*='{{ listConstructor.id }}-chk-list']").iCheck('uncheck');
						$("[id*='{{ listConstructor.id }}-chk-list']").attr('checked', false);
						$("[id*='{{ listConstructor.id }}-chk-list']").parent().parent().removeClass('checked');
						$p.removeClass( 'highlight' );
					 }
				});
				// Button fields
				{% for field in listConstructor.fieldButtons %}
					{% if field.type == "option" %}
						{% for fieldOption in field.options %}

									{% if fieldOption.actionType == "foreground" %}
										{% if fieldOption.confirm is not defined or fieldOption.confirm == false %}
										$('body').on('click', "[id^='{{ listConstructor.id }}-field-button-{{ fieldOption.id }}']", function() {
											url=$("#{{ listConstructor.id }}-field-button-{{ fieldOption.id }}-url").val();
											url=url.replace('_____',$(this).attr('attr-id'));
											window.location.href=url;
										});
										{% else %}
										{% endif %}
									{% else %}
										{% if fieldOption.confirm is not defined or fieldOption.confirm == false %}
											$('body').on('click', "[id^='{{ listConstructor.id }}-field-button-{{ fieldOption.id }}']", function() {
												url=$("#{{ listConstructor.id }}-field-button-{{ fieldOption.id }}-url").val();
												url=url.replace('_____',$(this).attr('attr-id'));
												$.getJSON(url, function( data ) {
													$.each( data, function( key, val ) {

													});
												}).always(function() {
													{{ listConstructor.id }}.ajax.reload();
												});
											});
										{% else %}
											$('body').on('click', "[id^='{{ listConstructor.id }}-field-button-{{ fieldOption.id }}']", function() {
											url=$("#{{ listConstructor.id }}-field-button-{{ fieldOption.id }}-url").val();
											url=url.replace('_____',$(this).attr('attr-id'));
											$('#{{ listConstructor.id }}-modal-button-continue').attr('attr-action',url);
											$('#{{ listConstructor.id }}-modal-button-continue').attr('attr-action-type','{{ fieldOption.actionType }}');
											$('#{{ listConstructor.id }}-modal-body').html('¿Está seguro que desea {{fieldOption.name}} este registro? {% if fieldOption.undo is defined and fieldOption.undo==false %} </br><b>¡ATENCIÓN!</b> Esta operación no podrá deshacerse.{% endif %}');
										});
										{% endif %}
									{% endif %}

						{% endfor %}
					{% else %}

									{% if field.actionType == "foreground" %}
										{% if field.confirm is not defined or field.confirm == false %}
										$('body').on('click', "[id^='{{ listConstructor.id }}-field-button-{{ field.id }}']", function() {
											url=$("#{{ listConstructor.id }}-field-button-{{ field.id }}-url").val();
											url=url.replace('_____',$(this).attr('attr-id'));
											window.location.href=url;
										});
										{% else %}
										{% endif %}
									{% else %}
										//Get data and open modal form
										{% if field.confirm is not defined or field.confirm == false %}
											$('body').on('click', "[id^='{{ listConstructor.id }}-field-button-{{ field.id }}']", function() {
												url=$("#{{ listConstructor.id }}-field-button-{{ field.id }}-url").val();
												url=url.replace('_____',$(this).attr('attr-id'));
												$.post(url, null,
													function(data, status, xhr){

															$("#{{field.modal}}-modal-form-body").html(data);
															$("#{{field.modal}}-modal-form-body").find(':checkbox').not($('[id$=-chkall]')).iCheck({checkboxClass: 'icheckbox_flat-blue', radioClass: 'iradio_flat-blue'});
															$("#{{field.modal}}-modal-form-body select").select2();
															$("#{{field.modal}}-modal-form").modal();

												});
											});
										{% else %}
											$('body').on('click', "[id^='{{ listConstructor.id }}-field-button-{{ field.id }}']", function() {
											url=$("#{{ listConstructor.id }}-field-button-{{ field.id }}-url").val();
											url=url.replace('_____',$(this).attr('attr-id'));
											$('#{{ listConstructor.id }}-modal-button-continue').attr('attr-action',url);
											$('#{{ listConstructor.id }}-modal-button-continue').attr('attr-action-type','{{ field.actionType }}');
											$('#{{ listConstructor.id }}-modal-body').html('¿Está seguro que desea {{field.name}} este registro? {% if field.undo is defined and field.undo==false %} </br><b>¡ATENCIÓN!</b> Esta operación no podrá deshacerse.{% endif %}');
										});
										{% endif %}
									{% endif %}

					{% endif %}

				{% endfor %}
				//Button Modal Confirm
				$('body').on('click', "#{{ listConstructor.id }}-modal-button-continue", function() {
						ids=[];
						var selectedItems = $("input[class*='-chk-list']:checked").map(function(){
								return $(this).attr("item-id");
						}).toArray();
						ids=selectedItems;

						if($(this).attr('attr-action-type')=="foreground"){
							//window.location.href=$(this).attr('attr-action');
							var form = document.createElement("form");
					    var element1 = document.createElement("input");
					    form.method = "POST";
							form.target = "_blank";
					    form.action = $(this).attr('attr-action');
					    element1.value=ids;
					    element1.name="ids";
					    form.appendChild(element1);
					    document.body.appendChild(form);
					    form.submit();
						}else{
							$.post($(this).attr('attr-action'), "ids="+ids, function(data, textStatus) {
							//$.getJSON($(this).attr('attr-action'), "ids="+ids, function( data ) {
								$.each( data, function( key, val ) {
								});
							}).always(function() {
								{{ listConstructor.id }}.ajax.reload();
							}, "json");

						}
						$("#{{ listConstructor.id }}-modal-confirm").modal('hide');
				});
			} );

			//TOP BUTTONS BACKGROUND ACTION
			{% for field in listConstructor.topButtons %}

				{% if field.actionType is defined and field.actionType=="background" %}
					//OPEN MODAL
					$('body').on('click', "#{{ field.id }}-top-button", function() {
						{% set routeParams = [] %}
						{% if field.routeParams is defined %}

							{% for key,param in field.routeParams %}
								{% if _context[param] is defined %} {# Detect if parameter is a reference to a var or is a value #}
									{% set routeParams = routeParams|merge({(key): _context[param]}) %}
								{% else %}
									{% set routeParams = routeParams|merge({(key): param}) %}
								{% endif %}
							{% endfor %}
						{% endif %}
						{% if field.modal is defined and field.modal|length  %}
								//if route has params...

								$.post('{{ url(field.route, routeParams) }}', null,
									function(data, status, xhr){
										$("#{{field.modal}}-modal-form-body").html(data);
										//$('#{{field.modal}}-modal-form input').iCheck({checkboxClass: 'icheckbox_flat-blue',radioClass: 'iradio_flat-blue'});
										$("#{{field.modal}}-modal-form-body").find(':checkbox').not($('[id$=-chkall]')).iCheck({checkboxClass: 'icheckbox_flat-blue', radioClass: 'iradio_flat-blue'});
										$("#{{field.modal}}-modal-form-body select").select2();
										$("#{{field.modal}}-modal-form").modal();
								});
							{% else %}
									{% if field.confirm is defined and field.confirm==true  %}
										{# SEND IDS #}
										$('#{{ listConstructor.id }}-modal-button-continue').attr('attr-action','{{ url(field.route, routeParams) }}');
										$('#{{ listConstructor.id }}-modal-button-continue').attr('attr-send-list','1');
										$('#{{ listConstructor.id }}-modal-button-continue').attr('attr-action-type','{{ field.actionType }}');
										$('#{{ listConstructor.id }}-modal-body').html('¿Está seguro que desea {{field.name}} los registro seleccionados? {% if field.undo is defined and field.undo==false %} </br><b>¡ATENCIÓN!</b> Esta operación no podrá deshacerse.{% endif %}');
										$("#{{ listConstructor.id }}-modal-confirm").modal();
									{% else %}

									{% endif %}

							{% endif %}

					});


					{% if field.modal is defined and field.modal|length  %}
								//CONTINUE BUTTON FOR MODAL FORMS
								$('body').on('click', "#{{ field.modal }}-button-continue", function() {
											if($("#{{field.modal}}-modal-form-body").find('form').valid()){
												if((++load_wait)==1) $("#load-spinner").fadeIn();
												var id_parent='';
												if (typeof $('#id-parent').val() !== 'undefined') {
													id_parent=encodeURI('&id-parent='+$('#id-parent').val());
												}
												$.post($("#{{field.modal}}-modal-form-body").find('form').find('#post-url').val(), $("#{{field.modal}}-modal-form-body").find('form').serialize()+id_parent,
														function(data, status, xhr){
															if((--load_wait)==0) $("#load-spinner").fadeOut();
															if(data.result){
																$("#{{ listConstructor.id }}").DataTable().ajax.reload();
																toastr.success("Datos guardados correctamente", "Confirmación", confirmation);
																$("#{{ field.modal }}-modal-form").modal('hide');
																$("#{{field.modal}}-modal-form-body").find('form').trigger("reset");
																$("#{{field.modal}}-modal-form-body").find('form').validate().resetForm();
															}
																else toastr.error("Ocurrió un error al guardar los datos", "Confirmación", confirmation);
													}, "json");
												}
								});
						{% else %}

						{% endif %}

				{% endif %}
			{% endfor %}
	</script>

	<!-- BUTTON ZONE -->
	<p>
	<div class="btn-group">
	{% for field in listConstructor.topButtons %}

				{% if field.actionType is defined and field.actionType=="background" %}
				<a style="font-size: 20px" id="{{ field.id }}-top-button" type="button" class="btn tooltip-primary {{ field.type }}" {% if field.tooltip is defined %} data-toggle="tooltip" data-placement="bottom" title="" data-original-title=" {{ field.tooltip }} {% endif %} ">
					<i class="{{ field.icon }}"></i>
				</a>
				{% else %}
						{% set routeParams = [] %}
						{% if field.routeParams is defined %}
							{% for key,param in field.routeParams %}
								{% if _context[param] is defined %} {# Detect if parameter is a reference to a var or is a value #}
									{% set routeParams = routeParams|merge({(key): _context[param]}) %}
								{% else %}
									{% set routeParams = routeParams|merge({(key): param}) %}
								{% endif %}
							{% endfor %}
						{% endif %}

						<a attr-search="{% if field.addSearch is defined %}{{field.addSearch}}{% else %} false {% endif %}" attr-href="{% if field.route is defined and field.route|length %}{{ url(field.route, routeParams) }}{% endif %}" href="javascript:void(0);"
						style="font-size: 20px" id="{{ field.id }}-top-button-foreground" type="button" class="btn tooltip-primary {% if field.type is defined and field.type|length %}{{ field.type }}{% else %} btn-default {% endif %}" {% if field.tooltip is defined %} data-toggle="tooltip" data-placement="bottom" title="" data-original-title=" {{ field.tooltip }} {% endif %} ">
							<i class="{{ field.icon }}"></i>{{ field.name }}
						</a>

				{% endif %}

	{% endfor %}
	<script>
		$('body').on('click', "[id$='-top-button-foreground']", function() {
			if($(this).attr('attr-href')!=""){
				var url=$(this).attr('attr-href');
				if($(this).attr('attr-search')==1){
					url+='?'+$("#search_param").val();
				}
				location.href=url;
			}
		});
	</script>
	</div>
	</p>
	<!-- END BUTTONZONE -->
	{% for field in listConstructor.fieldButtons %}

		{% set routeParams = [] %}
		{% set routeParams = routeParams|merge({('id'): '_____'}) %}
		{% if field.routeParams is defined %}
			{% for key,param in field.routeParams %}
				{% if _context[param] is defined %} {# Detect if parameter is a reference to a var or is a value #}
					{% set routeParams = routeParams|merge({(key): _context[param]}) %}
				{% else %}
					{% set routeParams = routeParams|merge({(key): param}) %}
				{% endif %}
			{% endfor %}
		{% endif %}

		{% if field.type == "option" %}
			{% for fieldOption in field.options %}
				{% set optionParams = routeParams %}
				{% if fieldOption.routeParams is defined %}
					{% for key,param in fieldOption.routeParams %}
						{% if _context[param] is defined %} {# Detect if parameter is a reference to a var or is a value #}
							{% set optionParams = optionParams|merge({(key): _context[param]}) %}
						{% else %}
							{% set optionParams = optionParams|merge({(key): param}) %}
						{% endif %}
					{% endfor %}
				{% endif %}
				<input id="{{ listConstructor.id }}-field-button-{{ fieldOption.id }}-url" type="hidden" value="{% if fieldOption.route|length %}{{ url(fieldOption.route,optionParams) }}{% endif %}" />
			{% endfor %}
		{% else %}
			<input id="{{ listConstructor.id }}-field-button-{{ field.id }}-url" type="hidden" value="{% if field.route|length %}{{ url(field.route,routeParams) }}{% endif %}" />
		{% endif %}
	{% endfor %}
	<table id="{{ listConstructor.id }}" class="table table-bordered hover stripe compact datatable" style="width: 100%">
			<thead>
				<tr>
					<th class="table-header-search">
					</th>
					{# only show search fields in data type fields#}
					{% for field in listConstructor.fields %}
						{% if field.type is not defined or field.type == "data" %}
							<th class="table-header-search"><input  id="s_{{ field.name }}" type="text" class="form-control" placeholder="Buscar {{ field.caption }}" /></th>
						{% else %}
							<th></th>
						{% endif %}
					{% endfor %}

					{% for field in listConstructor.fieldButtons %}
						<th class="table-header-search"></th>
					{% endfor %}

				</tr>
					<th class="table-header-name">
						<div class="checkbox checkbox-replace">
							<input type="checkbox" id="{{ listConstructor.id }}-chkall">
						</div>
					</th>
					{% for field in listConstructor.fields %}
						<th class="table-header-name {% if field.sum is defined and field.sum == true %} sum {% endif %} {% if field.format is defined %} {{field.format}} {% endif %}">{{ field.caption }} </th>
					{% endfor %}

					{% for field in listConstructor.fieldButtons %}
						<th class=""></th>
					{% endfor %}

			</thead>
		<tfoot id="{{ listConstructor.id }}-footer" style="display:none">
			<tr>
				<td class="table-footer">
					<b>TOTALES</b>
				</td>
				{# only show search fields in data type fields#}
				{% for field in listConstructor.fields %}
					{% if field.type is not defined or field.type == "data" %}
						<td class="table-footer"></td>
					{% else %}
						<td></td>
					{% endif %}
				{% endfor %}

				{% for field in listConstructor.fieldButtons %}
					<td class="table-footer"></td>
				{% endfor %}

			</tr>
		</tfoot>
	</table>
	<div class="modal fade" id="{{ listConstructor.id }}-modal-confirm" data-backdrop="static" style="display: none;">
		<div class="modal-dialog">
			<div class="modal-content" style="transform: matrix(1, 0, 0, 1, 0, 0);">
				<div class="modal-header">
					<h4 class="modal-title">Confirmación</h4>
				</div>
				<div id="{{ listConstructor.id }}-modal-body" class="modal-body">
				</div>
				<div id="{{ listConstructor.id }}-modal-footer" class="modal-footer">
					<button type="button" class="btn btn-primary" data-dismiss="modal">Cancelar</button>
					<button attr-action="" id="{{ listConstructor.id }}-modal-button-continue" type="button" class="btn btn-red">Continuar</button>
				</div>
			</div>
		</div>
	</div>


{% if include_post_templates is defined %}
	{% for template in include_post_templates %}
		{{ include(template) }}
	{% endfor %}
{% endif %}

{% if listOrigin is not defined %}
<!-- MODALS  -->
	{% if forms is defined %}
		{% for form in forms %}
			{% set formConstructor = form %}
			{{ include('@Globale/genericajaxform.html.twig') }}
		{% endfor %}
	{% endif %}
	<!-- END MODALS -->
{% endif %}
