{% if include_pre_templates is defined %}
	{% for template in include_pre_templates %}
		{{ include(template) }}
	{% endfor %}
{% endif %}

{# Eliminamos los strings concatenados en los fields del listado #}
{% set fields = listConstructor.fields %}
{% set tempFields = [] %}
{% for keyfield, field in fields %}
	{% set tokens = field.name|split('_o_') %}
	{% set colname = '' %}
		{% for key, token in tokens %}
			{% if token|first != "'" %}
				{% if key==tokens|length-1 %}
					{% set colname = colname ~ token %}
				{% else %}
					{% set colname = colname ~ token ~ '_o_' %}
				{% endif %}
			{% else %}
			{% endif %}
		{% endfor %}
		{% set field = field|merge({'name': colname}) %}
		{% set tempFields = tempFields|merge([field]) %}
{% endfor %}
{% set fields = tempFields %}

  {{ include("@Globale/form_validation.html.twig") }}
<input type="hidden" id="search_param"/>
<script>
var url = new URL(window.location.href);
			function insertParam(key, value) {
			    key = encodeURIComponent(key);
			    value = encodeURIComponent(value);

			    // kvp looks like ['key1=value1', 'key2=value2', ...]
			    var kvp = document.location.search.substr(1).split('&');
			    let i=0;

			    for(; i<kvp.length; i++){
			        if (kvp[i].startsWith(key + '=')) {
			            let pair = kvp[i].split('=');
			            pair[1] = value;
			            kvp[i] = pair.join('=');
			            break;
			        }
			    }

			    if(i >= kvp.length){
			        kvp[kvp.length] = [key,value].join('=');
			    }

			    // can return this or...
			    let params = kvp.join('&');

			    // reload page with new params
			    document.location.search = params;
			}

			function updateURLParameter(url, param, paramVal)
{
    var TheAnchor = null;
    var newAdditionalURL = "";
    var tempArray = url.split("?");
    var baseURL = tempArray[0];
    var additionalURL = tempArray[1];
    var temp = "";

    if (additionalURL)
    {
        var tmpAnchor = additionalURL.split("#");
        var TheParams = tmpAnchor[0];
            TheAnchor = tmpAnchor[1];
        if(TheAnchor)
            additionalURL = TheParams;

        tempArray = additionalURL.split("&");

        for (var i=0; i<tempArray.length; i++)
        {
            if(tempArray[i].split('=')[0] != param)
            {
                newAdditionalURL += temp + tempArray[i];
                temp = "&";
            }
        }
    }
    else
    {
        var tmpAnchor = baseURL.split("#");
        var TheParams = tmpAnchor[0];
            TheAnchor  = tmpAnchor[1];

        if(TheParams)
            baseURL = TheParams;
    }

    if(TheAnchor)
        paramVal += "#" + TheAnchor;

    var rows_txt = temp + "" + param + "=" + paramVal;
    return baseURL + "?" + newAdditionalURL + rows_txt;
}

			$(document).ready(function() {
				var ${{ listConstructor.id }}_var = jQuery("#{{ listConstructor.id }}");
				var {{ listConstructor.id }} = ${{ listConstructor.id }}_var.DataTable( {

					{% if hidePageLength is defined and hidePageLength == true%}
					 "bLengthChange" : false,
					 "pageLength": 20,
					{% else %}
					 "aLengthMenu": [[10, 20, 50, 250, 1000, -1], [10, 20, 50, 250, 1000, "Todos"]],
					 "pageLength": (url.searchParams.get('length')?url.searchParams.get('length')*1:50),
					{% endif %}
					"oClasses":{
						"sLengthSelect": "select2"
					},
					"searchCols": [
						null,
						{% for field in fields %}

							{% if field.type is defined and field.type == "date" %}
								{% set searchdate='' %}

								{% if app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name ~ '_from') != null %}
									{% set searchdate=app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name ~ '_from') ~ '#' %}
								{% endif %}

								{% if app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name ~ '_to') != null %}
									{% if searchdate == '' %}
										{% set searchdate = '#' %}
									{% endif %}
									{% set searchdate=searchdate ~ app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name ~ '_to') %}
								{% endif %}
								{% if searchdate != '' %}
									{ "search": "{{ searchdate }}" },
								{% else %}
									null,
								{% endif %}
							{% else %}

								{% if app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name) != null %}
									{ "search": "{{ app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name) }}" },
								{% else %}
									null,
								{% endif %}

							{% endif %}

						{% endfor %}

					],

					"displayStart": (url.searchParams.get('start')?url.searchParams.get('start')*1:0),
					//"processing": true,
					"serverSide": true,
					{% if listConstructor.routeParams is defined %}
						"ajax": {
								"url" : "{{ url( listConstructor.route, listConstructor.routeParams) }}",
								"data" : {"fields": "{{ fields|json_encode() }}"}
						},
					{% else %}
						"ajax": {
								"url" : "{{ url( listConstructor.route) }}",
								"data" : {"fields": "{{ fields|json_encode() }}"}
						},
					{% endif %}
					"language": {
						//"processing": '<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i><span class="sr-only">Cargando...</span> ',
						"lengthMenu": "Mostrar _MENU_ registros por página",
						"zeroRecords": "No se encontraron registros",
						"info": "Mostrando <b>página _PAGE_ de _PAGES_</b> (registros _START_ al _END_)",
						"infoEmpty": "No se encontraron registros",
						"infoFiltered": " - <b>_TOTAL_</b> registros filtrados de <b>_MAX_</b> registros totales",
						"search":         "Buscar",
						"paginate": {
							"first":      "Primero",
							"previous":   "Anterior",
							"next":       "Siguiente",
							"last":       "Último"
						},

					},

					"order": [[ {{  listConstructor.orderColumn }}, "{{  listConstructor.orderDirection }}" ]],
					"columns": [
            { "name": "checkboxes" ,"data": null, defaultContent: '',"width": "100px" },
						{# Remove concatenated strings #}
						{% for keyfield, field in fields %}
							{ "name": "{{ field.name }}" ,"data": "{{ field.name }}" },
						{% endfor %}
						{% if listConstructor.fieldButtons|length > 0 %}
            	{ "data": null, defaultContent: '' }
						{% endif %}
					],
					"drawCallback": function( settings ) {
							replaceCheckboxes();
					},

					{# Sumamos columnas con sum=true #}
					"footerCallback": function(row, data, start, end, display) {
						var api = this.api();

						api.columns('.sum', {
							page: 'current'
						}).every(function() {
							var data = this
								.data()
								.reduce(function(a, b) {
									var x = parseFloat(a) || 0;
									var y = parseFloat(b) || 0;
									return x + y;
								}, 0);
							 this.columns('.time', {page: 'current'}).every(function() {
								 //if has format we format it
	 	 							if(data!=null){
	 								var duration = moment.duration(data, 'seconds');
	 								var formatted = duration.format("hh:mm:ss");
	 								if(formatted.length==2) formatted="00:00:"+formatted;
	 								if(formatted.length==5) formatted="00:"+formatted;
	 							}else formatted = '00:00:00';
								data=formatted;
							 },0);
							 $("#{{ listConstructor.id }}-footer").show();

							$(this.footer()).html((typeof data!='string'?parseFloat(Math.round(data*100)/100).toLocaleString('es'):data)+' '+$(this.footer()).attr("attr-unity"));
						});
					},
					"columnDefs": [
						{
							"targets": 0,
							"orderable": false,
							"className": "text-center",
							{% if hideCheckBoxes is defined and hideCheckBoxes %}
								"visible": false,
							{% endif %}
							"render": function(data, type, row, meta){
									{% if listConstructor.multiselect is defined and listConstructor.multiselect==false %}
									return ''
									{% else %}
									return '<div class="checkbox checkbox-replace">'+
											  '<input type="checkbox" item-id="'+row['id']+'" class="{{ listConstructor.id }}-chk-list" id="'+row['id']+'-{{ listConstructor.id }}-chk-list">'+
											  '</div>';
									{% endif %}
								}
						},

						{% set counter = 1 %}
						{% for field in fields %}
								{
									"targets": {{ counter }},
									{# only show order field in data type fields#}
									{% if (field.type is not defined or field.type == "data" or field.type == "date" or field.type == "datetime" or field.type == "time") and (field.orderable is not defined or field.orderable == true) %}
									"orderable": true,
									{% else %}
									"orderable": false,
									{% endif %}
									{% if field.visible is defined %} "visible": "{{ field.visible }}", {% else %} {% if field.name != 'id' %}"visible": "true", {% endif %}{% endif %}


									{% if field.class is defined %} "className": "{{ field.class }}", {% endif %}
									{% if field.width is defined %} "width": "{{ field.width }}", {% endif %}

									{% if field.format is defined %}
										{% if field.format == "time" %}

											"render": function(data, type, row, meta){
													//var date = new Date(data*1000);
													//return ("0" + date.getHours()).slice(-2)+':'+("0" + date.getMinutes()).slice(-2)+':'+("0" + date.getSeconds()).slice(-2);;
													if(data!=null){
														var duration = moment.duration(data*1, 'seconds');
														var formatted = duration.format("hh:mm:ss");
														if(formatted.length==2) formatted="00:00:"+formatted;
														if(formatted.length==5) formatted="00:"+formatted;
														return formatted;
													}else return '00:00:00';
											}
										{% endif %}
										{% if field.format == "float" %}
											"render": function(data, type, row, meta){
													//var date = new Date(data*1000);
													//return ("0" + date.getHours()).slice(-2)+':'+("0" + date.getMinutes()).slice(-2)+':'+("0" + date.getSeconds()).slice(-2);;
													if(data!=null){
														//return data.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
														return parseFloat(data).toLocaleString('es'){% if field.unity is defined %}+' {{ field.unity }}'{% endif %};
													}else return '0';
											},
											"sortFunc": (a, b, order) => {
											    if (order === 'asc') {
											        return parseFloat(a) - parseFloat(b);
											    }
											    return parseFloat(b) - parseFloat(a); // desc
											},
										{% endif %}
									{% else %}
										"render": function(data, type, row, meta){

											var text='';
											var id=0;
												if(Array.isArray(data)){
													text=data[1];
													id=data[0];
													}
													else text=data;
											{#	if({{counter}}=={{listConstructor.tagColumn}}){
													text+="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
													row['_tags'].forEach(function(valor, indice, array) {
															text+='<div class="label label-'+valor.type+'">'+valor.name+'</div>';
													});
												}#}
												{# Check if has a select associated and fill it #}
													{% if '__' in field.name and field.replace is not defined %}
														{# check if exist the element in select #}
														if(row["{{ field.name}}"]!=null)
															if ($('#s_{{ listConstructor.id }}_{{ field.name}}').find("option[value='" + row["{{ field.name}}"] + "']").length) {
															   // $('#s_{{ field.name}}').val(row["{{ field.name}}"]).trigger('change');
															} else {
																	{# element not exist add it #}
															    var newOption = new Option(row["{{ field.name}}"], row["{{ field.name}}"], false, false);
															    $('#s_{{ listConstructor.id }}_{{ field.name}}').append(newOption);
															}
													{% endif %}
												{# if field is datetime convert it to spanish date format #}
												{% if field.type is defined %}
													{% if field.type == "datetime" %}
														if(text!=null && text!=""){
															var date=moment(text, "YYYY-MM-DD HH:mm:ss");
															text=date.format('DD/MM/YYYY HH:mm:ss');
														}
													{% else %}
														{% if field.type == "date" %}
															if(text!=null){
																var date=moment(text, "YYYY-MM-DD");
																text=date.format('DD/MM/YYYY');
															}
															{% else %}
																{% if field.type == "dateshort" %}
																	if(text!=null){
																		var date=moment(text+'/1970', "DD/MM/YYYY");
																		text=date.format('DD/MM');
																	}
																{% endif %}
														{% endif %}
													{% endif %}
													{% endif %}
												return '<div id="{{ listConstructor.id }}-{{ field.name}}-'+row['id']+'">'+text{% if field.unity is defined %}+' {{ field.unity }}'{% endif %}+'</div>';
										},
										{% endif %}
								},
						{% set counter = counter +1 %}
						{% endfor %}
						{% set counter = 1 %}
						{% for field in listConstructor.fieldButtons %}

							{
								"targets": {{ fields|length+counter }},
								"orderable": false,
								"width": "10px",
								"className": "text-right",
								"render": function(data, type, row, meta){
										var buttons='';
										{% if userData.permissions[listConstructor.id ~ '_field_' ~ field.id] is not defined or (userData.permissions[listConstructor.id ~ '_field_' ~ field.id] is defined and userData.permissions[listConstructor.id ~ '_field_' ~ field.id].allowaccess == true) %}
										{% if field.type is defined and field.type=="option" %}
											{% for fieldOption in field.options %}
												if(Array.isArray(row["{{ fieldOption.condition }}"]))
												buttons+='<div class="btn-group {% if fieldOption.condition is defined %}'+((row["{{ fieldOption.condition }}"][0]*1 != "{{ fieldOption.conditionValue }}"*1) ? 'hide' : '')+'{% endif %}">	<button attr-id="'+row['id']+'" id="{{ listConstructor.id }}-field-button-{{ fieldOption.id }}-'+row['id']+'" type="button" class="{% if field.default is defined and field.default==true %}default-action{% endif %} btn btn-{{ fieldOption.type }} tooltip-primary" {% if field.tooltip is defined %} data-toggle="tooltip" data-placement="bottom" title="" data-original-title=" {{ field.tooltip }} {% endif %}';
												else
												buttons+='<div class="btn-group {% if fieldOption.condition is defined %}'+((row["{{ fieldOption.condition }}"]*1 != "{{ fieldOption.conditionValue }}"*1) ? 'hide' : '')+'{% endif %}">	<button attr-id="'+row['id']+'" id="{{ listConstructor.id }}-field-button-{{ fieldOption.id }}-'+row['id']+'" type="button" class="{% if field.default is defined and field.default==true %}default-action{% endif %} btn btn-{{ fieldOption.type }} tooltip-primary"';
												buttons+='{% if fieldOption.tooltip is defined and fieldOption.tooltip != "" %} data-toggle="tooltip" data-placement="bottom" title="" data-original-title=" {{ fieldOption.tooltip }} {% endif %}"';
												buttons+='{% if fieldOption.confirm is defined %}{% if fieldOption.confirm == true %}  onclick="jQuery(\'#{{ listConstructor.id }}-modal-confirm\').modal(\'show\', {backdrop: \'static\'});" {% endif %}{% endif %}>';
												buttons+='<i class="{{ fieldOption.icon }}"></i></button></div>	';
										{% endfor %}
										{% else %}
											buttons+='<div class="btn-group {% if field.condition is defined %}'+((row["{{ field.condition }}"]*1 != "{{ field.conditionValue }}"*1) ? 'hide' : '')+'{% endif %}">	<button attr-id="'+row['id']+'" id="{{ listConstructor.id }}-field-button-{{ field.id }}-'+row['id']+'" type="button" class="{% if field.default is defined and field.default==true %}default-action{% endif %} btn btn-{{ field.type }} tooltip-primary"';
											buttons+='{% if field.tooltip is defined and field.tooltip != "" %} data-toggle="tooltip" data-placement="bottom" title="" data-original-title=" {{ field.tooltip }} {% endif %}"';
											buttons+='{% if field.confirm is defined %}{% if field.confirm == true %}  onclick="jQuery(\'#{{ listConstructor.id }}-modal-confirm\').modal(\'show\', {backdrop: \'static\'});" {% endif %}{% endif %}>';
											buttons+='<i class="{{ field.icon }}"></i></button></div>	';
										{% endif %}
										{% endif %}
	  							 return buttons;
									}
							},
							{% set counter = counter +1 %}

						{% endfor %}


						{ "visible": false, "targets": 1 }
					]
				}).on( 'processing.dt', function ( e, settings, processing ) {
					if(processing){
						if((++load_wait)==1) $("#load-spinner").fadeIn();
						/*url = new URL(window.location.href);
						url.searchParams.set('start', $("#{{ listConstructor.id }}").DataTable().page.info().start);
						window.history.replaceState(null, null, url);*/
						//window.history.replaceState('', '', updateURLParameter(window.location.href, "start", $("#{{ listConstructor.id }}").DataTable().page.info().start*1));
					 }else{
						if((load_wait)>0){ load_wait--; if(load_wait==0) $("#load-spinner").fadeOut();}
					}
    		}).on('preDraw', function () {
        	if((load_wait)==0){
						$("#load-spinner").fadeIn();
						load_wait++;

					}
		    })
		    .on( 'draw.dt', function () {
		      if((load_wait)>0){ load_wait--; if(load_wait==0) $("#load-spinner").fadeOut();}

		    })
				.on( 'page.dt', function () {
					window.history.replaceState('', '', updateURLParameter(window.location.href, "start", $("#{{ listConstructor.id }}").DataTable().page.info().start));
				})
				.on( 'length.dt', function () {
					window.history.replaceState('', '', updateURLParameter(window.location.href, "length", $("#{{ listConstructor.id }}").DataTable().page.info().length));
				});;

				//Double click row action
				$('#{{ listConstructor.id }} tbody').on('dblclick', 'tr', function () {
					var data = {{ listConstructor.id }}.row( this ).data();
					{% if listConstructor.rowAction is defined %}
						{# Default action defined in controller #}
						$('#{{ listConstructor.id }}-field-button-{{ listConstructor.rowAction }}-'+data.id).trigger('click');
					{% else %}
						if ($(".default-action")[0]){
							{# Default action defined in list buttons json #}
							$(this).find('.default-action').trigger('click');
						} else {
							{# Default action no defined, execute first button #}
							$(this).find("button").filter(":first").trigger('click');
						}
					{% endif %}
				});

				// Initalize Select Dropdown after DataTables is created
				${{ listConstructor.id }}_var.closest( '.dataTables_wrapper' ).find( 'select' ).select2( {
					minimumResultsForSearch: -1
				});

				// Highlighted rows
				$('body').on('click', '.{{ listConstructor.id }}-chk-list', function() {
					$p =  $(this).closest('tr');
					var is_checked = $(this).is(':checked');
					$p[is_checked ? 'addClass' : 'removeClass']( 'highlight' );
				});

				var typingTimer;
				var doneTypingInterval = 700;
				var searchColumn;
				function clearSearchTimeOut(){
					clearTimeout(typingTimer);
  				typingTimer = setTimeout(doSearch, doneTypingInterval);
				}

				function doSearch () {
					{{ listConstructor.id }}.columns(searchColumn+':name').search( $("[id='s_{{ listConstructor.id }}_"+searchColumn+"'][attr-list-id='{{ listConstructor.id }}']").val() ).draw();
					arrayParams={{ listConstructor.id }}.ajax.params();
					$("[id^='s_{{ listConstructor.id }}_']" ).each(function( index ) {
						url = new URL(window.location.href);
						if($(this).val()!=""){
							url.searchParams.set($(this).attr('id'), $(this).val());
						}
							else url.searchParams.delete($(this).attr('id'));
						window.history.replaceState(null, null, url);
					});

					window.history.replaceState('', '', updateURLParameter(window.location.href, "start", 0));
					$("#search_param").val(jQuery.param(arrayParams));
				}

				{% for field in fields %}

					{% if field.replace is defined %}
						$('body').on('change', '#s_{{ listConstructor.id }}_{{ field.name }}', function() {
							{{ listConstructor.id }}.columns('{{ field.name }}:name').search( this.value ).draw();
							arrayParams={{ listConstructor.id }}.ajax.params();
							$("#search_param").val(jQuery.param(arrayParams));
							url = new URL(window.location.href);
							url.searchParams.set("s_{{ listConstructor.id }}_{{ field.name }}",$("#s_{{ listConstructor.id }}_{{ field.name }}").val());
							window.history.replaceState(null, null, url);

						});
					{% else %}
						if($("#s_{{ listConstructor.id }}_{{ field.name }}").is('select')) event="change"; else event="keyup";
						$('body').on(event, '#s_{{ listConstructor.id }}_{{ field.name }}', function() {
							searchColumn='{{ field.name }}';

							if($(this).is('select')) doSearch ();
								else{
									clearSearchTimeOut();
								}
						});
						$('body').on('keydown', '#s_{{ listConstructor.id }}_{{ field.name }}', function() {
							 clearTimeout(typingTimer);
						});
					{% endif %}



				{% endfor %}

				// Button select all checkboxes
				$("#{{ listConstructor.id }}-chkall").click(function(){
					var is_checked = $(this).is(':checked');
					$p =  $("[id^='{{ listConstructor.id }}-chk-list']").closest('tr');
					if(is_checked){
						$("[id*='{{ listConstructor.id }}-chk-list']").iCheck('check');
						$("[id*='{{ listConstructor.id }}-chk-list']").attr('checked', true);
						$("[id*='{{ listConstructor.id }}-chk-list']").parent().parent().addClass('checked');
						$p.addClass( 'highlight' );
					}else{
						$("[id*='{{ listConstructor.id }}-chk-list']").iCheck('uncheck');
						$("[id*='{{ listConstructor.id }}-chk-list']").attr('checked', false);
						$("[id*='{{ listConstructor.id }}-chk-list']").parent().parent().removeClass('checked');
						$p.removeClass( 'highlight' );
					 }
				});
				{# moved modal confirm #}
			});

			//Top buttons Background or modal
	</script>

	{{ include('@Globale/list_button_fields.html.twig') }}
	{{ include('@Globale/list_button_top.html.twig') }}




	<!-- BUTTON ZONE -->
	{{ include('@Globale/list_button_top_paint.html.twig') }}

	{% if include_pre_list_templates is defined %}
		{% for template in include_pre_list_templates %}
			{{ include(template) }}
		{% endfor %}
	{% endif %}

	<table id="{{ listConstructor.id }}" class="table table-bordered hover stripe compact datatable" style="width: 100%">
			<thead class="table-thead">
				<tr>
					<th class="table-header-search" style="border-bottom: 1px solid #cecece !important;vertical-align: middle;text-align: center;font-size: 22px;color: #cececece;">
						<i class="fa fa-search"></i>
					</th>
					{# only show search fields in data type fields#}
					{% for field in fields %}
						{% if field.type is not defined or field.type == "data" %}
							<th class="table-header-search" style="border-bottom: 1px solid #cecece !important;">
								{% if field.filter is not defined or field.filter == true %}
									{% if field.replace is defined %}
									  {# Show combo box on replaces #}
										<select id="s_{{ listConstructor.id }}_{{ field.name }}" attr-list-id="{{ listConstructor.id }}" class="form-control table-header-search-input select2 select2-use">
											<option value="##ALL##" {% if app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name)!=null and app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name)=='##ALL##' %} selected="selected" {% endif %}>Todos</option>
											{% for key,option in field.replace %}
												<option value="{{ key }}"{% if app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name)!=null %}{% if app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name) == (key ~ '') %} selected="selected" {% endif %}{% else %}{% if option.default is defined and option.default == true%} attr-default="true" selected="selected" {% endif %}{% endif %}>{{ option.text }}</option>
											{% endfor %}

										</select>
										<script>
											$(document).ready(function() {
												$("#s_{{ listConstructor.id }}_{{ field.name }}").select2({dropdownCssClass : 'select2-bigdrop'});
											});
										</script>
									{% else %}
										{% if '__' in field.name %}
											{# Relations #}

												{#<select id="s_{{ field.name }}" class="form-control table-header-search-input select2 select2-use">

														<option value="##ALL##" selected> -- Todos -- </option>
														<option value="##NULL##"> -- Ninguno -- </option>

												</select>
												<script>
													$(document).ready(function() {
														$("#s_{{ field.name }}").select2({dropdownCssClass : 'select2-bigdrop'});
													});
												</script>#}
													<input id="s_{{ listConstructor.id }}_{{ field.name }}" attr-list-id="{{ listConstructor.id }}" type="text" class="table-header-search-input form-control" placeholder="Buscar {{ (field.caption)|trans }}"  autocomplete="off"/>
													<script>
														$(document).ready(function() {
														if(url.searchParams.get('s_{{ listConstructor.id }}_{{ field.name }}')!=null)
															$("#s_{{ listConstructor.id }}_{{ field.name }}").val(url.searchParams.get('s_{{ listConstructor.id }}_{{ field.name }}'));
														});
													</script>
										{% else %}
									   	{# Other fields show inputs #}

											<input id="s_{{ listConstructor.id }}_{{ field.name }}" attr-list-id="{{ listConstructor.id }}" type="text" class="table-header-search-input form-control" placeholder="Buscar {{ (field.caption)|trans }}"  autocomplete="off"/>
											<script>
													if(url.searchParams.get('s_{{ listConstructor.id }}_{{ field.name }}')!=null)
														$(document).ready(function() {
															$("#s_{{ listConstructor.id }}_{{ field.name }}").val(url.searchParams.get('s_{{ listConstructor.id }}_{{ field.name }}'));
														});
											</script>
										{% endif %}
									{% endif %}
								{% endif %}
							</th>
						{% else %}
							<th class="table-header-search" style="border-bottom: 1px solid #cecece !important;">
								{% if field.type == "datetime" %}
									<div><div style="z-index: 5 !important;" class='input-group date'>
												<input id="s_{{ listConstructor.id }}_{{ field.name }}_from" attr-list-id="{{ listConstructor.id }}" attr-group="{{ field.name }}" attr-max="s_{{ listConstructor.id }}_{{ field.name }}_to" type="text" class="datetimepicker table-header-search-input form-control" placeholder="{{ (field.caption)|trans }} desde" value="{% if app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name ~ '_from')!=null %}{{ app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name ~ '_from')|date("d/m/Y H:i:s") }}{% endif %}" autocomplete="off"/>
												<span class="input-group-addon">
                        	<span class="glyphicon glyphicon-calendar"></span>
                    		</span>
										</div></div>
									<div style="height: 5px;"></div>
									<div><div style="z-index: 2 !important;" class='input-group date'>
										<input id="s_{{ listConstructor.id }}_{{ field.name }}_to" attr-list-id="{{ listConstructor.id }}" attr-group="{{ field.name }}" attr-min="s_{{ listConstructor.id }}_{{ field.name }}_from" type="text" class="datetimepicker table-header-search-input form-control" placeholder="{{ (field.caption)|trans }} hasta" value="{% if app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name ~ '_to')!=null %}{{ app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name ~ '_to')|date("d/m/Y H:i:s") }}{% endif %}" autocomplete="off"/>
										<span class="input-group-addon">
											<span class="glyphicon glyphicon-calendar"></span>
										</span>
									</div></div>

									{% else %}
									{% if field.type == "date" %}
										<div><div style="z-index: 5 !important;" class='input-group date'>
													<input id="s_{{ listConstructor.id }}_{{ field.name }}_from" attr-list-id="{{ listConstructor.id }}" attr-group="{{ field.name }}" attr-max="s_{{ listConstructor.id }}_{{ field.name }}_to" type="text" class="datepicker table-header-search-input form-control" placeholder="{{ (field.caption)|trans }} desde" value="{% if app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name ~ '_from')!=null %}{{ app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name ~ '_from')|date("d/m/Y") }}{% endif %}" autocomplete="off"/>
													<span class="input-group-addon">
														<span class="glyphicon glyphicon-calendar"></span>
													</span>
											</div></div>
										<div style="height: 5px;"></div>
										<div><div style="z-index: 2 !important;" class='input-group date'>
											<input id="s_{{ listConstructor.id }}_{{ field.name }}_to" attr-list-id="{{ listConstructor.id }}" attr-group="{{ field.name }}" attr-min="s_{{ listConstructor.id }}_{{ field.name }}_from" type="text" class="datepicker table-header-search-input form-control" placeholder="{{ (field.caption)|trans }} hasta" value="{% if app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name ~ '_to')!=null %}{{ app.request.get('s_' ~ listConstructor.id ~ '_' ~ field.name ~ '_to')|date("d/m/Y") }}{% endif %}" autocomplete="off"/>
											<span class="input-group-addon">
												<span class="glyphicon glyphicon-calendar"></span>
											</span>
										</div></div>

									{% endif %}
								{% endif %}
							</th>
						{% endif %}
					{% endfor %}

					{#{% for field in listConstructor.fieldButtons %}#}
					{% if listConstructor.fieldButtons|length > 0 %}
					{% set buttons = listConstructor.fieldButtons|length %}
						<th class="table-thead-search text-right" colspan="{{ buttons }}" style="border-bottom: 1px solid #cecece !important;">
								<div class="btn-group ">
									<button id="clear-filters" type="button" class="btn btn-default tooltip-primary" style="border-color: #8a8a8a !important;height: 26px;line-height: 13px;">
										<i class="fa fa-eraser"></i>&nbsp;Limpiar filtros
									</button>
								</div>
						</th>
					{#{% endfor %}#}
					{% endif %}

				</tr>
					<th class="table-header-name table-thead" style="border-bottom: 1px solid #cecece !important;">
						{% if listConstructor.multiselect is defined and listConstructor.multiselect==false %}

						{% else %}
						<div class="checkbox checkbox-replace">
							<input type="checkbox" id="{{ listConstructor.id }}-chkall">
						</div>
						{% endif %}
					</th>
					{% for field in fields %}
						<th style="border-bottom: 1px solid #cecece !important;" class="table-header-name table-thead {% if field.sum is defined and field.sum == true %} sum {% endif %} {% if field.format is defined %} {{field.format}} {% endif %}">{{ (field.caption)|trans }} </th>
					{% endfor %}

					{% for field in listConstructor.fieldButtons %}

							<th class="table-thead" width="10px" style="border-bottom: 1px solid #cecece !important;"></th>

					{% endfor %}

			</thead>
		<tfoot id="{{ listConstructor.id }}-footer" style="display:none">
			<tr>
				<td class="table-footer">
					<b>TOTALES</b>
				</td>
				{# only show search fields in data type fields#}
				{% for field in fields %}
					{% if field.type is not defined or field.type == "data" %}
						<td class="table-footer" {% if field.unity is defined %} attr-unity="{{ field.unity }}" {% endif %}></td>
					{% else %}
						<td></td>
					{% endif %}
				{% endfor %}

				{% for field in listConstructor.fieldButtons %}

						<td class="table-footer"></td>

				{% endfor %}

			</tr>
		</tfoot>
	</table>

	{{ include('@Globale/list_modal_confirm.html.twig') }}

	<script>
	$(document).ready(function() {
		$('body').tooltip({ selector: '[data-toggle="tooltip"]' });
		$('.datetimepicker').each(function(index) {
			var valueField=$(this).val();
			var dateField=moment(valueField, "DD/MM/YYYY HH:mm:ss");
				$(this).datetimepicker({
				showTodayButton: true,
				format: 'DD/MM/YYYY HH:mm:ss',
				locale:'es',
				useCurrent: false,
				tooltips: spanish_tooltips_datetimepicker,
				date: (dateField.isValid())?dateField:null
			});
		});
		$('.datepicker').each(function(index) {
			var valueField=$(this).val();
			var dateField=moment(valueField, "DD/MM/YYYY");
				$(this).datetimepicker({
				showTodayButton: true,
				format: 'DD/MM/YYYY',
				locale:'es',
				useCurrent: false,
				tooltips: spanish_tooltips_datetimepicker,
				date: (dateField.isValid())?dateField:null
			});
		});

		$('.timepicker').each(function(index) {
			var valueField=$(this).val();
			var dateField=moment(valueField, "HH:mm:ss");
				$(this).datetimepicker({
				showTodayButton: true,
				format: 'HH:mm:ss',
				locale:'es',
				useCurrent: false,
				tooltips: spanish_tooltips_datetimepicker,
				date: (dateField.isValid())?dateField:null
			});

		});
		$("[id$='_from']").on("dp.change", function (e) {
				var from_date=e.date;
				var to_date=$('#'+$(this).attr('attr-max')).data("DateTimePicker").date();
				from_date=from_date!=null?from_date.format("YYYY-MM-DD HH:mm:ss"):"";
				to_date=to_date!=null?to_date.format("YYYY-MM-DD HH:mm:ss"):"";
				$('#'+$(this).attr('attr-max')).data("DateTimePicker").minDate(e.date);
				$("#{{ listConstructor.id }}").DataTable().columns($(this).attr('attr-group')+':name').search( from_date+'#'+to_date ).draw();
				arrayParams=$("#{{ listConstructor.id }}").DataTable().ajax.params();
				$("#search_param").val(jQuery.param(arrayParams));

				url = new URL(window.location.href);
				if(from_date+'#'+to_date!="#")
					url.searchParams.set($(this).attr('id'), from_date);
					else url.searchParams.delete($(this).attr('id'));
				window.history.replaceState(null, null, url);

		});
		$("[id$='_to']").on("dp.change", function (e) {
				var to_date=e.date;
				var from_date=$('#'+$(this).attr('attr-min')).data("DateTimePicker").date();
				if(e.oldDate==null){
					e.date.set({h:23,m:59,s:59});
					$('#'+$(this).attr('id')).data("DateTimePicker").date(e.date);
				}
				from_date=from_date!=null?from_date.format("YYYY-MM-DD HH:mm:ss"):"";
				to_date=to_date!=null?to_date.format("YYYY-MM-DD HH:mm:ss"):"";
				$('#'+$(this).attr('attr-min')).data("DateTimePicker").maxDate(e.date);
				$("#{{ listConstructor.id }}").DataTable().columns($(this).attr('attr-group')+':name').search( from_date+'#'+to_date ).draw();
				arrayParams=$("#{{ listConstructor.id }}").DataTable().ajax.params();
				$("#search_param").val(jQuery.param(arrayParams));

				url = new URL(window.location.href);
				if(from_date+'#'+to_date!="#")
					url.searchParams.set($(this).attr('id'), to_date);
					else url.searchParams.delete($(this).attr('id'));
				window.history.replaceState(null, null, url);
		});

		$('body').on('click', "#clear-filters", function() {
				$("#clear-filters").parent().parent().parent().find('input').val('');
				$("#clear-filters").parent().parent().parent().find('select').select2('val', $(this).find(">:first-child").val());
				//$('#s_invalid').select2('val', $('#s_invalid option:first-child').val());
				url = new URL(window.location.href);
				{% for field in fields %}
				url.searchParams.delete('s_{{ listConstructor.id }}_{{ field.name }}');
				{% endfor %}
				window.history.replaceState(null, null, url);
				$("#{{ listConstructor.id }}").DataTable().columns().search("").draw();
				//$("#{{ listConstructor.id }}").DataTable().ajax.reload();

		});




		/*$("[id$='_to']").on("dp.change", function (e) {
				$('#'+$(this).attr('attr-min')).data("DateTimePicker").maxDate(e.date);
				console.log("Cambio");
		});*/
	});
	</script>

{% if include_post_templates is defined %}
	{% for template in include_post_templates %}
		{{ include(template) }}
	{% endfor %}
{% endif %}

{% if listOrigin is not defined %}
<!-- MODALS  -->
	{% if forms is defined %}
		{% for form in forms %}
			{% set formConstructor = form %}
			{{ include('@Globale/genericajaxform.html.twig') }}
		{% endfor %}
	{% endif %}
	<!-- END MODALS -->
{% endif %}
