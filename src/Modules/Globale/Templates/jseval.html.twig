<script>
(function(window){
  window.htmlentities = {
    /**
     * Converts a string to its html characters completely.
     *
     * @param {String} str String with unescaped HTML characters
     **/
    encode : function(str) {
      var buf = [];

      for (var i=str.length-1;i>=0;i--) {
        buf.unshift(['&#', str[i].charCodeAt(), ';'].join(''));
      }

      return buf.join('');
    },
    /**
     * Converts an html characterSet into its original character.
     *
     * @param {String} str htmlSet entities
     **/
    decode : function(str) {
      return str.replace(/&#(\d+);/g, function(match, dec) {
        return String.fromCharCode(dec);
      });
    }
  };
})(window);

// Reemplaza una cadena con sus variables
function replaceEval(evalString, data){
  if (evalString!='' && evalString.indexOf('?')>-1 && evalString.indexOf(':')>-1){
    evalString = htmlentities.decode(evalString);
    evalString = evalString.replace(/&amp;/g, "&");
    var lastSearch = -1;
    var newSearch =  evalString.indexOf('#f');
    while(lastSearch!=newSearch){
      replacename = evalString.substr(newSearch);
      if (replacename.length >= 5){
        replacename = replacename.substr(3);
        if (replacename.indexOf('|')>-1){
          replacename = replacename.substr(0,replacename.indexOf('|'));
          if (data[replacename] !== undefined){
            evalString = evalString.replaceAll('#f|'+replacename+'|',data[replacename]);
            lastSearch = newSearch;
            newSearch =  evalString.indexOf('#f');
          }else{
            lastSearch = -1;
            newSearch =  -1;
          }
        }else{
          lastSearch = -1;
          newSearch =  -1;
        }
      }else{
        lastSearch = -1;
        newSearch =  -1;
      }
    }
    evalString = eval(evalString);
  }
  return evalString;
}
</script>
